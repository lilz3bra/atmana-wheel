// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  giveaways     Giveaways[]
  prompts       Prompts[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Giveaways {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  cost        Int
  prize       String
  paid        Boolean
  hidden      Boolean
  twitchId    String
  creatorId   String                @db.ObjectId
  creator     User                  @relation(fields: [creatorId], references: [id])
  winner      String?
  paused      Boolean?
  redemptions GiveawayRedemptions[]
}

model Prompts {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  cost        Int
  prize       String
  paid        Boolean
  hidden      Boolean
  twitchId    String
  prompt      String
  creatorId   String              @db.ObjectId
  creator     User                @relation(fields: [creatorId], references: [id])
  redemptions PromptRedemptions[]
  winner      String?
  paused      Boolean?
}

model PromptRedemptions {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  viewerId   String   @db.ObjectId
  viewer     Viewer   @relation(fields: [viewerId], references: [id])
  response   String
  redeemedAt DateTime
  promptId   String   @db.ObjectId
  prompt     Prompts  @relation(fields: [promptId], references: [id])
}

model Viewer {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  promptRedemptions   PromptRedemptions[]
  giveawayRedemptions GiveawayRedemptions[]
  name                String
  twitchId            String
  ipAddress           String?
  isBanned            Boolean
  isApproved          Boolean

  @@unique([twitchId])
}

model GiveawayRedemptions {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  viewerId   String    @db.ObjectId
  viewer     Viewer    @relation(fields: [viewerId], references: [id])
  redeemedAt DateTime
  giveawayId String    @db.ObjectId
  giveaway   Giveaways @relation(fields: [giveawayId], references: [id])
}
